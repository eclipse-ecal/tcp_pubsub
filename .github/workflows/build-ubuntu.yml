name: Ubuntu

on:
  push:
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE:   Release
  PROJECT_NAME: tcp_pubsub

jobs:
  build-ubuntu:

    strategy:
      fail-fast: false
      matrix:
        library_type: [static, shared, object]
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04]

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:

    - name: Set Variables
      run: |
        if [[ '${{ matrix.library_type }}' == 'static' ]]; then
          echo "build_shared_libs=OFF"        >> "$GITHUB_ENV"
          echo "tcp_pubsub_library_type=STATIC"  >> "$GITHUB_ENV"
          echo "package_postfix=static"       >> "$GITHUB_ENV"
        elif [[ '${{ matrix.library_type }}' == 'shared' ]]; then
          echo "build_shared_libs=ON"         >> "$GITHUB_ENV"
          echo "tcp_pubsub_library_type=SHARED"  >> "$GITHUB_ENV"
          echo "package_postfix=shared"       >> "$GITHUB_ENV"
        elif [[ '${{ matrix.library_type }}' == 'object' ]]; then
          echo "build_shared_libs=OFF"        >> "$GITHUB_ENV"
          echo "tcp_pubsub_library_type=OBJECT"  >> "$GITHUB_ENV"
          echo "package_postfix=object"       >> "$GITHUB_ENV"
        fi
        
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules:  'true'
        fetch-depth: 0

    ############################################
    # Test-compile the project
    ############################################

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
           cmake -B ${{github.workspace}}/_build \
                 -DTCP_PUBSUB_BUILD_SAMPLES=ON \
                 -DTCP_PUBSUB_BUILD_TESTS=ON \
                 -DTCP_PUBSUB_USE_BUILTIN_ASIO=ON \
                 -DTCP_PUBSUB_USE_BUILTIN_RECYCLE=ON \
                 -DTCP_PUBSUB_USE_BUILTIN_GTEST=ON \
                 -DTCP_PUBSUB_LIBRARY_TYPE=${{env.tcp_pubsub_library_type}} \
                 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                 -DCMAKE_CXX_FLAGS=-DASIO_NO_DEPRECATED \
                 -DBUILD_SHARED_LIBS=${{ env.build_shared_libs }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/_build --config ${{env.BUILD_TYPE}}

    - name: Run Tests
      run: ctest -C Release -V
      working-directory: ${{ github.workspace }}/_build

    - name: Read Project Version from CMakeCache
      run: |
        cmake_project_version_string=$(cat "${{github.workspace}}/_build/CMakeCache.txt" | grep "^CMAKE_PROJECT_VERSION:")
        arr=(${cmake_project_version_string//=/ })
        cmake_project_version=${arr[1]}
        echo "CMAKE_PROJECT_VERSION=$cmake_project_version"  >> "$GITHUB_ENV"
      shell: bash

    - name: CPack
      run: cpack -G DEB
      working-directory: ${{ github.workspace }}/_build
      if: ${{ matrix.library_type != 'object' }}

    - name: Rename .deb installer
      run: |
        mv *.deb '${{ env.PROJECT_NAME }}-${{ env.CMAKE_PROJECT_VERSION }}-${{ matrix.os }}-${{ env.package_postfix }}.deb'
      shell: bash
      working-directory: ${{github.workspace}}/_build/_package/
      if: ${{ matrix.library_type != 'object' }}

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ env.CMAKE_PROJECT_VERSION }}-${{ matrix.os }}-${{ env.package_postfix }}
        path: ${{github.workspace}}/_build/_package/*.deb
      if: ${{ matrix.library_type != 'object' }}

    ############################################
    # Test if our binary can be linked against
    ############################################

    - name: Install binaries
      shell: bash
      run: sudo dpkg -i ${{ github.workspace }}/_build/_package/*.deb
      if: ${{ matrix.library_type != 'object' }}

    - name: Compile integration test (Release)
      run: |
           cmake -B ${{github.workspace}}/samples/integration_test/_build/release \
                 -DCMAKE_BUILD_TYPE=Release
           cmake --build ${{github.workspace}}/samples/integration_test/_build/release
           
      working-directory: ${{ github.workspace }}/samples/integration_test
      if: ${{ matrix.library_type != 'object' }}

    - name: Run integration test (Release)
      run: ./integration_test
      working-directory: ${{ github.workspace }}/samples/integration_test/_build/release
      if: ${{ matrix.library_type != 'object' }}

    - name: Compile integration test (Debug)
      run: |
            cmake -B ${{github.workspace}}/samples/integration_test/_build/debug \
                  -DCMAKE_BUILD_TYPE=Debug 
            cmake --build ${{github.workspace}}/samples/integration_test/_build/debug
            
      working-directory: ${{ github.workspace }}/samples/integration_test
      if: ${{ matrix.library_type != 'object' }}

    - name: Run integration test (Debug)
      run: ./integration_test
      working-directory: ${{ github.workspace }}/samples/integration_test/_build/debug
      if: ${{ matrix.library_type != 'object' }}
